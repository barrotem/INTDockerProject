name: Polybot Service Deployment

on:
  push:
    branches:
      - main

env:
  EC2_PUBLIC_IP: 51.20.138.189  # Should be replaced to the EC2 instance public IP

jobs:
  PolybotBuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Build and push image
        run: |
          cd polybot
          
          # Login to ECR (commend in in case you use ECR, change region code and ECR URI):
          # export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          # export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 352708296901.dkr.ecr.eu-central-1.amazonaws.com
          
          # Login to DockerHub (comment out if you don't use DockerHub):         
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/polybot:${{ github.run_number }}
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

  Yolo5Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Build and push image
        run: |
          cd yolo5
          
          # export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          # export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 352708296901.dkr.ecr.eu-central-1.amazonaws.com
               
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/yolo5:${{ github.run_number }}
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

  Deploy:
    name: Deploy Docker compose project
    runs-on: ubuntu-latest
    needs:
      - PolybotBuild
      - Yolo5Build

    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Copy Compose files to the EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: docker-compose.yaml
          target: PolybotService/

      - name: Update the Docker Compose project in the EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            # You deployment script here...
            # Change deployment script so it matches my configuration - secrets will be stored in hidden files with names matching the base configuration.
            
            sudo apt update && sudo apt install jq -y
            
            cd PolybotService/
            
            # Save telegram bot token in a secret file, to be used in docker-compose.yaml
            echo -n "${{ secrets.TELEGRAM_BOT_TOKEN }}" > .telegram_token_secret.txt
            
            # Get the ngrok current domain (you should assume ngrok is already running in the EC2)
            NGROK_DOMAIN=$(curl -s localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
            # Save ngrok domain in a secret file, to be used in docker-compose.yaml
            echo -n $NGROK_DOMAIN > .telegram_app_url_secret.txt
            
            # Generate .env file
            # Include mongo base image and bucket_name in .env for future changes
            echo """\ 
            MONGO_IMAGE_NAME=mongo:5
            YOLO5_IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/yolo5:${{ github.run_number }}
            POLYBOT_IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/polybot:${{ github.run_number }}
            BUCKET_NAME=barrotem-polybot-docker-bucket\
            """ > .env
            
            # Take the service down
            docker compose down
            
            # Take it up with the current updated values
            docker compose up -d
